name: publish-test

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

env:
  MAJOR: 1
  MINOR: 0
  PATCH: $[counter(variables['minor'], 0)]
  VERSION: '$(MAJOR).$(MINOR).$(PATCH)'

jobs:
  publish-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: publish-extension
        env:
          PUBLISHER_NAME: ${{ secrets.PUBLISHER_NAME }}
          ORG_NAME: ${{ secrets.ORG_NAME }}
          USER_TOKEN: ${{ secrets.USER_TOKEN }}
        run: |
            echo $(PATCH)
            echo $(VERSION)
#           name="Synopsys-security-scan"
#           echo $name
#           echo "EXTENSION_NAME=$name" >> build.env
#           vss_extension=$(cat vss-extension.json)
#           vss_extension=$(echo $vss_extension | jq ".id = \"$name\"")
#           vss_extension=$(echo $vss_extension | jq ".name = \"$name\"")
#           azure_extension_version=$(echo $vss_extension | jq -r '.version')
#           echo "AZURE_EXTENSION_VERSION=$azure_extension_version" >> build.env
#           rm vss-extension.json
#           echo $vss_extension > vss-extension.json
#           cd synopsys-task
#           task_json=$(cat task.json)
#           task_json=$(echo $task_json | jq ".name = \"$name\"")
#           task_json=$(echo $task_json | jq ".id = \"$uuid\"")
#           rm task.json
#           npm install
#           npm run all
#           rm -rf node_modules
#           echo $task_json > task.json
#           cat task.json
#           cd ..
#           cat vss-extension.json
#           npm i -g tfx-cli
#           tfx extension publish --publisher TestCIPub --rev-version --manifest-globs vss-extension.json --token ${USER_TOKEN}
#

      # - name: Install dependencies
      #   run: cd synopsys-task && npm ci

      # - name: Unit Test Cases
      #   id: unit-test-cases
      #   shell: bash
      #   run: |
      #     cd synopsys-task && npm run test
      #     coverageFile="coverage/index.html"

      #     ### fetching line coverage from coverage/index.html file
      #     coverageSpan=$(grep -B 1 '<span class="quiet">Lines</span>' $coverageFile | head -n 1)
      #     coverageHtml=$(echo "$coverageSpan" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
      #     coverageInPercent=$(echo $coverageHtml | sed -n 's/.*<span class="strong">\([0-9.]*%\).*/\1/p' | tr -d ' ')
      #     echo "Line Coverage: $coverageInPercent"

      #     ### remove percentage sign from coverageInPercent and convert to a floatin-point number 
      #     coverageValue=$(echo "$coverageInPercent" | tr -d '%' | sed 's/,/./g')
      #     ### check if the coverage is below 90%
      #     if [[ $coverageValue < 90 ]]; then
      #         echo "##[error]Line coverage is below 90%"
      #         exit 1
      #     fi
