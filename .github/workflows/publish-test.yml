name: publish-test

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  publish-test:
    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Node.js 20.x
        uses: actions/setup-node@v4

        with:
          node-version: 20.x

#      - name: versioning
#        id: version-update
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
#        run: |
#          vss_extension_dev=$(cat vss-extension-dev.json)
#          extension_name=$(echo $vss_extension_dev | jq -r '.name' )
#          echo "EXTENSION_NAME=$extension_name" >> $GITHUB_ENV
#          current_extension_version=$(echo $vss_extension_dev | jq -r '.version')
#          echo "CURRENT_VERSION=$current_extension_version" >> $GITHUB_ENV
#          echo "current extension version: " $current_extension_version
#          major=$(echo $current_extension_version | awk -F. '{print $1}')
#          minor=$(echo $current_extension_version | awk -F. '{print $2}')
#          patch=$(echo $current_extension_version | awk -F. '{print $3}')
#          COMMIT_MESSAGE_HEADER=$(git log -1 --pretty=%B | head -n 1)
#          COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE_HEADER" | awk -F: '{print $1}')
#          echo "commit message: " $COMMIT_MESSAGE_HEADER
#          if [[ "$COMMIT_MESSAGE" == "BREAKING CHANGE" ]]; then
#              new_version=$((major+1)).0.0
#              echo "Updating extension version $current_extension_version --> $new_version"
#          elif [[ "$COMMIT_MESSAGE" == "perf" ]]; then
#              new_version=$((major+1)).0.0
#              echo "Updating extension version $current_extension_version --> $new_version"
#          elif [[ "$COMMIT_MESSAGE" == "feat" ]]; then
#              new_version=$major.$((minor+1)).0
#              echo "Updating extension version $current_extension_version --> $new_version"
#          elif [[ "$COMMIT_MESSAGE" == "fix" ]]; then
#              new_version=$major.$minor.$((patch+1))
#              echo "Updating extension version $current_extension_version --> $new_version"
#          else
#              new_version=$current_extension_version
#              echo "Extension version will not be updated. Current version: $new_version"
#          fi
#
#          if [[ "$current_extension_version" != "$new_version" ]]; then
#             echo "Updating vss-extension-dev.json with the new version: ${new_version}"
#             jq --arg new_version "$new_version" '.version = $new_version' vss-extension-dev.json > vss-extension-dev.json.tmp && mv vss-extension-dev.json.tmp vss-extension-dev.json
#             echo "Updated vss-extension-dev.json file"
#             cat vss-extension-dev.json
#          else
#             echo "vss-extension-dev.json file"
#             cat vss-extension-dev.json
#          fi
#          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: versioning
        id: version-update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
        run: |
          vss_extension_dev=$(cat vss-extension-dev.json)
          extension_name=$(echo $vss_extension_dev | jq -r '.name' )
          echo "EXTENSION_NAME=$extension_name" >> $GITHUB_ENV
          current_extension_version=$(echo $vss_extension_dev | jq -r '.version')
          echo "CURRENT_VERSION=$current_extension_version" >> $GITHUB_ENV
          echo "current extension version: " $current_extension_version
          previous_extension_version=$(grep 'extension_version' extension_version.txt | cut -d '=' -f 2)
          echo  "previous extension version:" $previous_extension_version
          previous_major=$(echo $previous_extension_version | awk -F. '{print $1}')
          previous_minor=$(echo $previous_extension_version | awk -F. '{print $2}')
          current_major=$(echo $current_extension_version | awk -F. '{print $1}')
          current_minor=$(echo $current_extension_version | awk -F. '{print $2}')
          current_patch=$(echo $current_extension_version | awk -F. '{print $3}')
          if [ "$previous_major" -eq "$current_major" ] && [ "$previous_minor" -eq "$current_minor" ]; then
             new_version=$current_major.$current_minor.$((current_patch+1))
             echo "Updating extension version to: ${new_version}"
             echo "Updating vss-extension-dev.json with the new version: ${new_version}"
             jq --arg new_version "$new_version" '.version = $new_version' vss-extension-dev.json > vss-extension-dev.json.tmp && mv vss-extension-dev.json.tmp vss-extension-dev.json
             echo "Updated vss-extension-dev.json file"
             cat vss-extension-dev.json
             echo "Updating extension_version.txt with the new version: ${new_version}"
             sed -i "s/extension_version=.*/extension_version=$new_version/" extension_version.txt
             echo "Updated extension_version.txt file"
             cat extension_version.txt
          
             cd synopsys-task 
             echo "Updating package.json version to: ${new_version}"
             echo "Updating package.json with the new version: ${new_version}"
             jq --arg new_version "$new_version" '.version = $new_version' package.json > package.json.tmp && mv package.json.tmp package.json
             echo "Updated package.json file"
             cat package.json
          
             echo "Updating task.json version to: ${new_version}"
             echo "Updating task.json with the new version: ${new_version}"
             jq --arg patch_version $((current_patch+1)) '.version.Patch = $patch_version' task.json > task.json.tmp && mv task.json.tmp task.json
             echo "Updated task.json file"
             cat task.json
    
          else
             new_version=$current_extension_version
             echo "Extension version will not be updated automatically. Current version: ${new_version}"
          fi
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: publish-extension
        id: publish-extension
        if: ${{  steps.version-update.conclusion == 'success'  }}
        env:
          PUBLISHER_NAME: ${{ secrets.PUBLISHER_NAME }}
          ORGANIZATION_NAME: ${{ secrets.ORG_NAME }}
          USER_TOKEN: ${{ secrets.USER_TOKEN }} #personal_access_token of azure devops account
        run: |
          vss_extension_dev=$(cat vss-extension-dev.json)
          extension_name=$(echo $vss_extension_dev | jq -r '.name' )
          echo "Extension Name:" $extension_name
          extension_version=$(echo $vss_extension_dev | jq -r '.version')
          echo "Extension Version:" $extension_version
          echo "Installing tfx-cli..."
          npm i -g tfx-cli
          echo "Creating extension $extension_name with version $extension_version"
          npx tfx-cli extension create --manifest-globs vss-extension-dev.json
          echo "Extension $extension_name created successfully!"
          echo "Publishing extension $extension_name with version $extension_version"
          publish_exit_code=${PIPESTATUS[0]}
          if [ $publish_exit_code -eq 0 ]; then
             echo "Extension $extension_name version $extension_version published successfully!"
          else
            echo "Failed to publish the extension $extension_name version $extension_version."
            exit 1
          fi

#  npm i -g tfx-cli
#  tfx extension publish --publisher ${PUBLISHER_NAME}  --manifest-globs vss-extension-dev.json --share-with ${ORGANIZATION_NAME}  --token ${USER_TOKEN} | tee tfx_output.log
#  tfx extension publish --publisher TestCIPub  --manifest-globs vss-extension-dev.json  --token ${USER_TOKEN}  | tee tfx_output.log

      - name: update extension version
        id: update-extension-version
        if: ${{  steps.publish-extension.conclusion == 'success' && env.NEW_VERSION != env.CURRENT_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
        run: |
          echo "Updating version in vss-extension-dev.json..."
          git config --local user.name "$(git log -n 1 --pretty=format:%an)"
          git config --local user.email "$(git log -n 1 --pretty=format:%ae)"
          git add  vss-extension-dev.json extension_version.txt
          cd synopsys-task
          git add package.json task.json
          git commit -m "update extension version [skip ci]"
          git push origin main
          echo "Successful updated version in vss-extension-dev.json..."
#          git config --local user.name "github-actions[bot]"
#          git config --local user.email "github-actions[bot]@users.noreply.github.com"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXTENSION_NAME }}-${{ env.NEW_VERSION }}.vsix
          path: "*.vsix"