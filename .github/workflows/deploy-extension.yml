name: publish-test

on:
  workflow_dispatch:

jobs:
  deploy-extension-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: deploy-extension
        id: deploy-extension
        env:
          PUBLISHER_NAME: ${{ secrets.PUBLISHER_NAME }}
          ORG_NAME: ${{ secrets.ORG_NAME }}
          USER_TOKEN: ${{ secrets.USER_TOKEN }}
        run: |
          name="Synopsys-security-scan"
          echo "EXTENSION_NAME=$name" 
          vss_extension_dev=$(cat vss-extension-dev.json)
          azure_extension_version=$(echo $vss_extension_dev | jq -r '.version')
          echo "current version: " $azure_extension_version
          echo "CURRENT_VERSION=$azure_extension_version" >> $GITHUB_ENV
          major=$(echo $azure_extension_version | awk -F. '{print $1}')
          minor=$(echo $azure_extension_version | awk -F. '{print $2}')
          patch=$(echo $azure_extension_version | awk -F. '{print $3}')
          COMMIT_MESSAGE_HEADER=$(git log -1 --pretty=%B | head -n 1)
          COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE_HEADER" | awk -F: '{print $1}') 
          echo "commit message: " $COMMIT_MESSAGE_HEADER
          if [[ "$COMMIT_MESSAGE" == "fix" ]]; then
             version=$major.$minor.$((patch+1))
             echo "updating extension version $azure_extension_version to $version"
          else
            version=$azure_extension_version
          fi
          
          if [[ "$azure_extension_version" != "$version" ]]; then
            jq --arg version "$version" '.version = $version' vss-extension-dev.json > vss-extension-dev.json.tmp && mv vss-extension-dev.json.tmp vss-extension-dev.json
            echo "NEW_VERSION=$version" >> $GITHUB_ENV
            echo "Publishing extension with latest version: $version"
            npm i -g tfx-cli
            tfx extension publish --publisher TestCIPub  --manifest-globs vss-extension-dev.json --token ${USER_TOKEN}   
            echo "Successful published extension with latest version: $version "  
          else
            echo "No extension version update"
            echo "NEW_VERSION=$version" >> $GITHUB_ENV
          fi
          cat vss-extension-dev.json
          echo "AZURE_EXTENSION_VERSION=$version"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-artifact
          path: vss-extension.json
